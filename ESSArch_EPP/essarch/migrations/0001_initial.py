# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import essarch.fields
import uuid
import picklefield.fields


class Migration(migrations.Migration):

    dependencies = [
        ('configuration', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('ReqUUID', models.CharField(max_length=36)),
                ('ReqType', models.IntegerField(null=True, choices=[(3, b'Generate DIP (package)'), (4, b'Generate DIP (package extracted)'), (1, b'Generate DIP (package & package extracted)'), (2, b'Verify StorageMedium'), (5, b'Get AIP to ControlArea')])),
                ('ReqPurpose', models.CharField(max_length=255)),
                ('user', models.CharField(max_length=45)),
                ('password', models.CharField(max_length=45, blank=True)),
                ('ObjectIdentifierValue', models.CharField(max_length=255, blank=True)),
                ('storageMediumID', models.CharField(max_length=45, blank=True)),
                ('Status', models.IntegerField(default=0, null=True, blank=True, choices=[(0, b'Pending'), (2, b'Initiate'), (5, b'Progress'), (20, b'Success'), (100, b'FAIL')])),
                ('Path', models.CharField(max_length=255)),
                ('posted', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'AccessQueue',
                'permissions': (('list_accessqueue', 'Can list access queue'),),
            },
        ),
        migrations.CreateModel(
            name='agentIdentifier',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('agentIdentifierValue', models.CharField(max_length=45)),
                ('agentName', models.CharField(max_length=45)),
                ('agentType', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'agentIdentifier',
            },
        ),
        migrations.CreateModel(
            name='ArchiveObject',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('ObjectUUID', models.CharField(unique=True, max_length=36)),
                ('ObjectIdentifierValue', models.CharField(unique=True, max_length=255)),
                ('ObjectPackageName', models.CharField(max_length=255, blank=True)),
                ('ObjectSize', models.BigIntegerField(null=True)),
                ('ObjectNumItems', models.IntegerField(null=True)),
                ('ObjectMessageDigestAlgorithm', models.IntegerField(null=True)),
                ('ObjectMessageDigest', models.CharField(max_length=128, blank=True)),
                ('ObjectPath', models.CharField(max_length=255, blank=True)),
                ('ObjectActive', models.IntegerField(null=True)),
                ('MetaObjectIdentifier', models.CharField(max_length=255, blank=True)),
                ('MetaObjectSize', models.BigIntegerField(null=True)),
                ('CMetaMessageDigestAlgorithm', models.IntegerField(null=True)),
                ('CMetaMessageDigest', models.CharField(max_length=128, blank=True)),
                ('PMetaMessageDigestAlgorithm', models.IntegerField(null=True)),
                ('PMetaMessageDigest', models.CharField(max_length=128, blank=True)),
                ('DataObjectSize', models.BigIntegerField(null=True)),
                ('DataObjectNumItems', models.IntegerField(null=True)),
                ('Status', models.IntegerField(null=True)),
                ('StatusActivity', models.IntegerField(null=True, choices=[(0, b'OK'), (1, b'New object'), (2, b'Receive'), (3, b'Checking'), (4, b'Need of assistance'), (5, b'Progress'), (6, b'Pending writes'), (7, b'ControlArea'), (8, b'WorkArea'), (100, b'FAIL')])),
                ('StatusProcess', models.IntegerField(null=True, choices=[(0, b'Receive new object'), (5, b'The object is ready to remodel'), (9, b'New object stable'), (10, b"Object don't exist in AIS"), (11, b"Object don't have any projectcode in AIS"), (12, b"Object don't have any local policy"), (13, b'Object already have an AIP!'), (14, b'Object is not active!'), (19, b'Object got a policy'), (20, b'Object not updated from AIS'), (21, b'Object not accepted in AIS'), (24, b'Object accepted in AIS'), (25, b'SIP validate'), (26, b'SIP validate failed'), (29, b'SIP validate OK'), (30, b'Create AIP package'), (31, b'AIP create failed'), (39, b'AIP created OK'), (40, b'Create package checksum'), (49, b'AIP checksum created OK'), (50, b'AIP validate'), (51, b'AIP validate failed'), (59, b'AIP validate OK'), (60, b'Try to remove IngestObject'), (61, b'Failed to remove IngestObject'), (69, b'Remove OK of IngestObject'), (1000, b'Write AIP to longterm storage'), (1001, b'Fail to write AIP'), (1002, b'No empty media available'), (1003, b'Problem to mount media'), (1004, b'Failed to verify tape after full write'), (1500, b'Remote AIP'), (1999, b'Write AIP OK'), (2000, b'Try to remove temp AIP object'), (2001, b'Failed to remove temp AIP object'), (2009, b'Remove temp AIP object OK'), (3000, b'Archived'), (5000, b'ControlArea'), (5100, b'WorkArea'), (9999, b'Deleted')])),
                ('LastEventDate', models.DateTimeField(null=True)),
                ('linkingAgentIdentifierValue', models.CharField(max_length=255, blank=True)),
                ('CreateDate', models.DateTimeField(null=True)),
                ('CreateAgentIdentifierValue', models.CharField(max_length=255, blank=True)),
                ('EntryDate', models.DateTimeField(null=True)),
                ('EntryAgentIdentifierValue', models.CharField(max_length=255, blank=True)),
                ('OAISPackageType', models.IntegerField(null=True, choices=[(0, b'SIP'), (1, b'AIC'), (2, b'AIP'), (3, b'AIU'), (4, b'DIP')])),
                ('preservationLevelValue', models.IntegerField(null=True)),
                ('DELIVERYTYPE', models.CharField(max_length=255, blank=True)),
                ('INFORMATIONCLASS', models.IntegerField(null=True)),
                ('Generation', models.IntegerField(null=True)),
                ('LocalDBdatetime', models.DateTimeField(null=True)),
                ('ExtDBdatetime', models.DateTimeField(null=True)),
                ('PolicyId', models.ForeignKey(db_column=b'PolicyId', to_field=b'PolicyID', blank=True, to='configuration.ArchivePolicy', null=True)),
            ],
            options={
                'db_table': 'IngestObject',
            },
        ),
        migrations.CreateModel(
            name='ArchiveObjectData',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('creator', models.CharField(max_length=255, blank=True)),
                ('label', models.CharField(max_length=255, blank=True)),
                ('startdate', models.DateTimeField(null=True)),
                ('enddate', models.DateTimeField(null=True)),
                ('UUID', models.ForeignKey(to='essarch.ArchiveObject', db_column=b'UUID', to_field=b'ObjectUUID')),
            ],
            options={
                'db_table': 'Object_data',
            },
        ),
        migrations.CreateModel(
            name='ArchiveObjectMetadata',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('ObjectIdentifierValue', models.CharField(max_length=255, blank=True)),
                ('ObjectMetadataType', models.IntegerField(null=True)),
                ('ObjectMetadataServer', models.IntegerField(null=True)),
                ('ObjectMetadataURL', models.CharField(max_length=255, blank=True)),
                ('ObjectMetadataBLOB', models.TextField(blank=True)),
                ('linkingAgentIdentifierValue', models.CharField(max_length=45, blank=True)),
                ('LocalDBdatetime', models.DateTimeField(null=True)),
                ('ExtDBdatetime', models.DateTimeField(null=True)),
                ('ObjectUUID', models.ForeignKey(to='essarch.ArchiveObject', db_column=b'ObjectUUID', to_field=b'ObjectUUID')),
            ],
            options={
                'db_table': 'IngestObjectMetadata',
            },
        ),
        migrations.CreateModel(
            name='ArchiveObjectRel',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('AIC_UUID', models.ForeignKey(related_name='relaic_set', db_column=b'AIC_UUID', to_field=b'ObjectUUID', to='essarch.ArchiveObject')),
                ('UUID', models.ForeignKey(related_name='reluuid_set', db_column=b'UUID', to_field=b'ObjectUUID', to='essarch.ArchiveObject')),
            ],
            options={
                'db_table': 'Object_rel',
            },
        ),
        migrations.CreateModel(
            name='ControlAreaQueue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ReqUUID', models.CharField(max_length=36)),
                ('ReqType', models.IntegerField(null=True, choices=[(1, b'CheckIn from Reception'), (2, b'CheckOut to Workarea'), (3, b'CheckIn from Workarea'), (4, b'DiffCheck'), (5, b'Preserve Information Package'), (6, b'CheckOut to Gatearea from WorkArea'), (7, b'CheckIn from Gatearea to WorkArea'), (8, b'Delete IP in control/work area')])),
                ('ReqPurpose', models.CharField(max_length=255)),
                ('user', models.CharField(max_length=45)),
                ('password', models.CharField(max_length=45, blank=True)),
                ('ObjectIdentifierValue', models.CharField(max_length=255, blank=True)),
                ('Status', models.IntegerField(default=0, null=True, blank=True, choices=[(0, b'Pending'), (2, b'Initiate'), (5, b'Progress'), (20, b'Success'), (100, b'FAIL')])),
                ('posted', models.DateTimeField(auto_now_add=True)),
                ('taskid', models.CharField(max_length=255, null=True, blank=True)),
            ],
            options={
                'db_table': 'ReqControlAreaQueue',
            },
        ),
        migrations.CreateModel(
            name='eventIdentifier',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('eventIdentifierValue', models.CharField(unique=True, max_length=36)),
                ('eventType', models.IntegerField(null=True)),
                ('eventDateTime', models.DateTimeField(null=True)),
                ('eventDetail', models.CharField(max_length=255)),
                ('eventApplication', models.CharField(max_length=50)),
                ('eventVersion', models.CharField(max_length=45)),
                ('eventOutcome', models.IntegerField(null=True)),
                ('eventOutcomeDetailNote', models.CharField(max_length=1024)),
                ('linkingAgentIdentifierValue', models.CharField(max_length=45)),
                ('linkingObjectIdentifierValue', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'eventIdentifier',
            },
        ),
        migrations.CreateModel(
            name='eventType_codes',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('code', models.IntegerField(null=True)),
                ('desc_sv', models.CharField(max_length=100)),
                ('desc_en', models.CharField(max_length=100)),
                ('localDB', models.IntegerField(null=True)),
                ('externalDB', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'eventType_codes',
            },
        ),
        migrations.CreateModel(
            name='IngestQueue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ReqUUID', models.CharField(max_length=36)),
                ('ReqType', models.IntegerField(null=True, choices=[(1, b'Ingest request'), (2, b'Ingest request without AIS')])),
                ('ReqPurpose', models.CharField(max_length=255)),
                ('user', models.CharField(max_length=45)),
                ('password', models.CharField(max_length=45, blank=True)),
                ('ObjectIdentifierValue', models.CharField(max_length=255, blank=True)),
                ('Status', models.IntegerField(default=0, null=True, blank=True, choices=[(0, b'Pending'), (2, b'Initiate'), (5, b'Progress'), (20, b'Success'), (100, b'FAIL')])),
                ('posted', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'ReqIngestQueue',
                'permissions': (('list_ingestqueue', 'Can list ingest queue'),),
            },
        ),
        migrations.CreateModel(
            name='IOqueue',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('cmd', models.IntegerField(null=True)),
                ('cmdprio', models.IntegerField(null=True)),
                ('work_uuid', models.CharField(max_length=36)),
                ('ObjectIdentifierValue', models.CharField(max_length=255)),
                ('ObjectMessageDigest', models.CharField(max_length=128)),
                ('ObjectPath', models.CharField(max_length=255)),
                ('storageMedium', models.IntegerField(null=True)),
                ('storageMediumID', models.CharField(max_length=45)),
                ('sm_list', models.CharField(max_length=255)),
                ('storageMediumBlockSize', models.IntegerField(null=True)),
                ('storageMediumFormat', models.IntegerField(null=True)),
                ('contentLocationValue', models.IntegerField(null=True)),
                ('storageMediumLocation', models.CharField(max_length=45)),
                ('t_prefix', models.CharField(max_length=6)),
                ('WriteSize', models.BigIntegerField(null=True)),
                ('date_created', models.DateTimeField(null=True)),
                ('Status', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'IOqueue',
            },
        ),
        migrations.CreateModel(
            name='ObjectMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, serialize=False, editable=False, primary_key=True)),
                ('label', models.CharField(max_length=255, blank=True)),
                ('startdate', models.DateTimeField(null=True)),
                ('enddate', models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='MigrationQueue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ReqUUID', models.CharField(max_length=36)),
                ('ReqType', models.IntegerField(null=True, choices=[(1, b'Copy IP to new storage')])),
                ('ReqPurpose', models.CharField(max_length=255)),
                ('user', models.CharField(max_length=45)),
                ('password', models.CharField(max_length=45, blank=True)),
                ('ObjectIdentifierValue', picklefield.fields.PickledObjectField(editable=False)),
                ('TargetMediumID', picklefield.fields.PickledObjectField(editable=False)),
                ('Status', models.IntegerField(default=0, null=True, blank=True, choices=[(0, b'Pending'), (2, b'Initiate'), (5, b'Progress'), (20, b'Success'), (100, b'FAIL')])),
                ('Path', models.CharField(max_length=255)),
                ('CopyPath', models.CharField(max_length=255, blank=True)),
                ('CopyOnlyFlag', models.BooleanField(default=False)),
                ('task_id', models.CharField(max_length=36, blank=True)),
                ('posted', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'MigrationQueue',
                'permissions': (('list_migrationqueue', 'Can list migration queue'),),
            },
        ),
        migrations.CreateModel(
            name='permission',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
            ],
            options={
                'permissions': (('essadministrate', 'ESSArch admin '), ('essaccess', 'ESSArch access'), ('essingest', 'ESSArch ingest'), ('infoclass_0', 'Information Class 0'), ('infoclass_1', 'Information Class 1'), ('infoclass_2', 'Information Class 2'), ('infoclass_3', 'Information Class 3'), ('infoclass_4', 'Information Class 4')),
            },
        ),
        migrations.CreateModel(
            name='robot',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slot_id', models.IntegerField(null=True)),
                ('drive_id', models.IntegerField(null=True)),
                ('status', models.CharField(max_length=45)),
                ('t_id', models.CharField(max_length=6)),
            ],
            options={
                'db_table': 'robot',
                'permissions': (('list_robot', 'Can list robot'),),
            },
        ),
        migrations.CreateModel(
            name='robotdrives',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('drive_id', models.IntegerField(null=True)),
                ('t_id', models.CharField(max_length=6)),
                ('slot_id', models.IntegerField(null=True)),
                ('status', models.CharField(max_length=10)),
                ('num_mounts', models.IntegerField(null=True)),
                ('drive_dev', models.CharField(max_length=15)),
                ('drive_type', models.CharField(max_length=15)),
                ('drive_serial', models.CharField(max_length=20)),
                ('drive_firmware', models.CharField(max_length=20)),
                ('drive_lock', models.CharField(max_length=36)),
                ('IdleTime', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'robotdrives',
            },
        ),
        migrations.CreateModel(
            name='robotie',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('slot_id', models.IntegerField(null=True)),
                ('drive_id', models.IntegerField(null=True)),
                ('status', models.CharField(max_length=10)),
                ('t_id', models.CharField(max_length=6)),
            ],
            options={
                'db_table': 'robotie',
            },
        ),
        migrations.CreateModel(
            name='robotQueue',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ReqUUID', models.CharField(max_length=36)),
                ('ReqType', models.IntegerField(null=True, choices=[(50, b'Mount tape'), (51, b'Unmount tape'), (52, b'Unmount tape (force)'), (1, b'Robot inventory')])),
                ('ReqPurpose', models.CharField(max_length=255)),
                ('user', models.CharField(max_length=45)),
                ('password', models.CharField(max_length=45, blank=True)),
                ('MediumID', models.CharField(max_length=45, blank=True)),
                ('Status', models.IntegerField(default=0, null=True, blank=True, choices=[(0, b'Pending'), (2, b'Initiate'), (5, b'Progress'), (20, b'Success'), (100, b'FAIL')])),
                ('task_id', models.CharField(max_length=36, blank=True)),
                ('posted', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'robotQueue',
                'permissions': (('list_robotqueue', 'Can list robot queue'),),
            },
        ),
        migrations.CreateModel(
            name='storage',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('contentLocation', models.BigIntegerField(null=True)),
                ('ObjectIdentifierValue', models.CharField(max_length=255)),
                ('contentLocationType', models.IntegerField(null=True)),
                ('contentLocationValue', models.CharField(max_length=45)),
                ('storageMediumID', models.CharField(max_length=45)),
                ('LocalDBdatetime', models.DateTimeField(null=True)),
                ('ExtDBdatetime', models.DateTimeField(null=True)),
                ('ObjectUUID', models.ForeignKey(db_column=b'ObjectUUID', to_field=b'ObjectUUID', to='essarch.ArchiveObject', null=True)),
            ],
            options={
                'db_table': 'storage',
                'permissions': (('list_storage', 'Can list storage'),),
            },
        ),
        migrations.CreateModel(
            name='storageMedium',
            fields=[
                ('id', essarch.fields.BigAutoField(serialize=False, primary_key=True)),
                ('storageMediumUUID', models.CharField(unique=True, max_length=36)),
                ('storageMedium', models.IntegerField(null=True, choices=[(200, b'DISK'), (301, b'IBM-LTO1'), (302, b'IBM-LTO2'), (303, b'IBM-LTO3'), (304, b'IBM-LTO4'), (305, b'IBM-LTO5'), (306, b'IBM-LTO6'), (325, b'HP-LTO5'), (326, b'HP-LTO6'), (401, b'HDFS'), (402, b'HDFS-REST')])),
                ('storageMediumID', models.CharField(unique=True, max_length=45)),
                ('storageMediumDate', models.DateTimeField(null=True)),
                ('storageMediumLocation', models.CharField(max_length=45)),
                ('storageMediumLocationStatus', models.IntegerField(null=True, choices=[(10, b'Delivered'), (20, b'Received'), (30, b'Placed'), (40, b'Collected'), (50, b'Robot')])),
                ('storageMediumBlockSize', models.IntegerField(null=True)),
                ('storageMediumUsedCapacity', models.BigIntegerField(null=True)),
                ('storageMediumStatus', models.IntegerField(null=True, choices=[(0, b'Inactive'), (20, b'Write'), (30, b'Full'), (100, b'FAIL')])),
                ('storageMediumFormat', models.IntegerField(null=True, choices=[(103, b'103 (AIC support)'), (102, b'102 (Media label)'), (101, b'101 (Old read only)'), (100, b'100 (Old read only)')])),
                ('storageMediumMounts', models.IntegerField(null=True)),
                ('linkingAgentIdentifierValue', models.CharField(max_length=45)),
                ('CreateDate', models.DateTimeField(null=True)),
                ('CreateAgentIdentifierValue', models.CharField(max_length=45)),
                ('LocalDBdatetime', models.DateTimeField(null=True)),
                ('ExtDBdatetime', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'storageMedium',
                'permissions': (('list_storageMedium', 'Can list storageMedium'),),
            },
        ),
        migrations.AddField(
            model_name='storage',
            name='storageMediumUUID',
            field=models.ForeignKey(db_column=b'storageMediumUUID', to_field=b'storageMediumUUID', to='essarch.storageMedium', null=True),
        ),
        migrations.AddField(
            model_name='archiveobject',
            name='archiveobjects',
            field=models.ManyToManyField(related_name='aic_set', through='essarch.ArchiveObjectRel', to='essarch.ArchiveObject'),
        ),
        migrations.AddField(
            model_name='archiveobject',
            name='ObjectMetadata',
            field=models.ForeignKey(blank=True, to='essarch.ObjectMetadata', null=True),
        ),
    ]
